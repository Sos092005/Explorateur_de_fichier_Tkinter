"""
themes_utils.py

Module de gestion des th√®mes pour l'explorateur de fichiers.
Utilise `ttkthemes` pour appliquer des th√®mes modernes √† l'interface Tkinter.
Inclut la v√©rification des pr√©requis, le chargement des th√®mes et la sauvegarde des pr√©f√©rences utilisateur.

Fonctionnalit√©s :
- V√©rification et installation des modules n√©cessaires.
- Chargement et application des th√®mes via `ttkthemes`.
- Gestion des pr√©f√©rences utilisateur avec stockage en JSON.

"""

import sys
import subprocess
import os
import json
import tkinter as tk
from tkinter import ttk, messagebox
from ttkthemes import ThemedStyle

# ==========================
# üîç V√©rification des pr√©requis
# ==========================

REQUIRED_MODULES = ["tkinter", "ttkthemes", "json", "os"]

def check_and_install_modules():
    """
    V√©rifie si les modules n√©cessaires sont install√©s.
    Installe automatiquement `ttkthemes` s'il est absent.
    """
    missing_modules = []
    
    # V√©rification de tkinter (int√©gr√© mais peut √™tre absent)
    try:
        import tkinter
    except ImportError:
        missing_modules.append("tkinter (int√©gr√© √† Python mais peut √™tre d√©sinstall√©)")

    # V√©rification de ttkthemes
    try:
        import ttkthemes
    except ImportError:
        missing_modules.append("ttkthemes")
    
    if not missing_modules:
        print("‚úÖ Tous les pr√©requis sont satisfaits.")
        return

    print(f"‚ö†Ô∏è Modules manquants : {missing_modules}")
    
    # Installation automatique de ttkthemes si n√©cessaire
    if "ttkthemes" in missing_modules:
        print("üì¶ Installation de ttkthemes...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "ttkthemes"])
        print("‚úÖ ttkthemes install√© avec succ√®s.")

# ==========================
# üé® Gestion des th√®mes
# ==========================

CONFIG_FILE = "theme_config.json"

def charger_preferences_theme():
    """
    Charge le th√®me pr√©f√©r√© de l'utilisateur depuis un fichier JSON.
    Retourne le nom du th√®me par d√©faut si le fichier est inexistant ou corrompu.

    Returns:
        str: Nom du th√®me enregistr√© ou "clam" (par d√©faut).
    """
    if not os.path.exists(CONFIG_FILE):
        return "clam"

    try:
        with open(CONFIG_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)
            return data.get("theme", "clam")
    except (json.JSONDecodeError, IOError):
        return "clam"

def sauvegarder_preferences_theme(theme_name):
    """
    Sauvegarde le th√®me s√©lectionn√© dans un fichier JSON.

    Args:
        theme_name (str): Nom du th√®me √† sauvegarder.
    """
    try:
        with open(CONFIG_FILE, "w", encoding="utf-8") as file:
            json.dump({"theme": theme_name}, file, indent=4)
    except IOError:
        print("‚ùå Erreur lors de l'√©criture du fichier de configuration.")

def appliquer_theme(root, theme_name):
    """
    Applique le th√®me s√©lectionn√© √† l'interface Tkinter.

    Args:
        root (tk.Tk): Fen√™tre principale Tkinter.
        theme_name (str): Nom du th√®me √† appliquer.
    """
    try:
        style = ThemedStyle(root)
        style.set_theme(theme_name)
        print(f"‚úÖ Th√®me appliqu√© : {theme_name}")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'application du th√®me : {e}")

# ==========================
# üß™ TEST D'EX√âCUTION
# ==========================

if __name__ == "__main__":
    check_and_install_modules()  # V√©rifie et installe les d√©pendances si n√©cessaire

    # Cr√©ation de la fen√™tre principale Tkinter
    root = tk.Tk()
    root.title("Test des Th√®mes")
    root.geometry("400x300")

    # Chargement du th√®me enregistr√©
    theme_actuel = charger_preferences_theme()
    appliquer_theme(root, theme_actuel)

    # Cr√©ation d'un menu d√©roulant pour choisir un th√®me
    def changer_theme():
        nouveau_theme = theme_var.get()
        appliquer_theme(root, nouveau_theme)
        sauvegarder_preferences_theme(nouveau_theme)

    theme_var = tk.StringVar(value=theme_actuel)
    theme_menu = ttk.Combobox(root, textvariable=theme_var, values=ThemedStyle(root).theme_names())
    theme_menu.pack(pady=10)

    btn_appliquer = ttk.Button(root, text="Appliquer Th√®me", command=changer_theme)
    btn_appliquer.pack(pady=10)

    root.mainloop()
